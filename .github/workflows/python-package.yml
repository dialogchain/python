name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-venv

    - name: Install Poetry
      run: |
        echo "=== Installing Poetry ==="
        # Uninstall any existing Poetry installations
        pip uninstall -y poetry || true
        pip uninstall -y poetry-core || true
        pip uninstall -y poetry-plugin-export || true
        
        # Clear Poetry cache and config
        rm -rf ~/.cache/pypoetry
        rm -rf ~/.config/pypoetry
        
        # Install specific version of Poetry directly using pipx
        python -m pip install --user pipx
        python -m pipx ensurepath
        pipx install "poetry==1.5.1"
        
        # Add Poetry to PATH
        echo "$(python -m site --user-base)/bin" >> $GITHUB_PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        
        # Verify installation
        which poetry || { echo "Poetry not found in PATH"; exit 1; }
        poetry --version || { echo "Poetry version check failed"; exit 1; }

    - name: Configure Poetry
      run: |
        echo "=== Configuring Poetry ==="
        echo "Python executable: $(which python)"
        echo "Python version: $(python --version)"
        echo "Poetry version: $(poetry --version || echo 'Not available')"
        
        # Set Poetry to use in-project virtualenvs
        echo "\n=== Configuring Poetry ==="
        poetry config virtualenvs.create true || \
          { echo "Failed to set virtualenvs.create"; exit 1; }
        poetry config virtualenvs.in-project true || \
          { echo "Failed to set virtualenvs.in-project"; exit 1; }
        
        # Create a minimal pyproject.toml if it doesn't exist
        if [ ! -f pyproject.toml ]; then
          echo "\n=== Creating minimal pyproject.toml ==="
          cat > pyproject.toml <<EOL
[tool.poetry]
name = "dialogchain"
version = "0.1.0"
description = "DialogChain Python Package"
authors = ["Your Name <your.email@example.com>"]

[tool.poetry.dependencies]
python = "^3.8"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
EOL
        fi
        
        # Verify configuration
        echo "\n=== Current Poetry Configuration ==="
        poetry config --list || \
          { echo "Failed to list Poetry configuration"; exit 1; }
        
        echo "\n=== Poetry Environment ==="
        poetry env info || \
          { echo "Failed to get Poetry environment info"; exit 1; }
        
        echo "\n=== Python Path ==="
        python -c "import sys; print('\n'.join(sys.path))"

    - name: Install dependencies
      run: |
        echo "=== Installing dependencies ==="
        # Check if poetry.lock exists
        if [ -f poetry.lock ]; then
          echo "Using existing poetry.lock"
          poetry install --no-interaction --no-ansi -v
        else
          echo "No poetry.lock found, installing without lock file"
          poetry install --no-interaction --no-ansi -v --no-lock
        fi
        # Verify the environment
        echo "\n=== Environment information ==="
        poetry env info
        echo "\n=== Installed packages ==="
        poetry show --tree || echo "Failed to show package tree"

    - name: Run tests
      run: |
        poetry run pytest tests/ -v

    - name: Lint with flake8
      run: |
        poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        poetry run flake8 . --count --max-complexity=10 --max-line-length=88 --statistics
